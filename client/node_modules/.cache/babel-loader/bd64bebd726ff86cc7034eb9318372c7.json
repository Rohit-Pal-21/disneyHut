{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport const tmdbApi = createApi({\n  reducerPath: \"tmdbApi\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: \"https://mymovies.onrender.com/api\"\n  }),\n  endpoints: builder => ({\n    getTrending: builder.query({\n      query: type => `/trending/${type}`\n    }),\n    getSingleTrending: builder.query({\n      async queryFn(type, _queryApi, _extraOptions, fetchWithBQ) {\n        const trendingList = await fetchWithBQ(`/trending/${type}`);\n        if (trendingList.error) return {\n          error: trendingList.error\n        };\n        const singleData = await trendingList.data.results.filter(single => single.media_type !== \"person\")[Math.floor(Math.random() * 10)];\n\n        if (singleData.media_type === \"movie\") {\n          const result = await fetchWithBQ(`/trending/movie/${singleData.id}`);\n          return result.data ? {\n            data: { ...result.data,\n              mediaType: \"movie\"\n            }\n          } : {\n            error: result.error\n          };\n        }\n\n        if (singleData.media_type === \"tv\") {\n          const result = await fetchWithBQ(`/trending/show/${singleData.id}`);\n          return result.data ? {\n            data: { ...result.data,\n              mediaType: \"show\"\n            }\n          } : {\n            error: result.error\n          };\n        }\n      }\n\n    }),\n    getMovieList: builder.query({\n      query: type => `/list/movie/${type}`\n    }),\n    getShowList: builder.query({\n      query: type => `/list/show/${type}`\n    }),\n    getMovieTrendingPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/trending/movie/page/${page}`;\n      }\n    }),\n    getMovieNowPlayingPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/movie/nowplaying/${page}`;\n      }\n    }),\n    getMoviePopularPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/movie/popular/${page}`;\n      }\n    }),\n    getMovieTopRatedPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/movie/toprated/${page}`;\n      }\n    }),\n    getMovieUpcomingPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/movie/upcoming/${page}`;\n      }\n    }),\n    getMovieDetailsPage: builder.query({\n      query: movie_id => `/details/movie/${movie_id}`\n    }),\n    getMovieGenrePage: builder.query({\n      query: args => {\n        const {\n          page,\n          genre\n        } = args;\n        return {\n          url: `/movie/genre/${genre}/${page}`,\n          params: {\n            page,\n            genre\n          }\n        };\n      }\n    }),\n    getShowTrendingPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/trending/show/page/${page}`;\n      }\n    }),\n    getShowAiringTodayPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/show/airingtoday/${page}`;\n      }\n    }),\n    getShowPopularPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/show/popular/${page}`;\n      }\n    }),\n    getShowTopRatedPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/show/toprated/${page}`;\n      }\n    }),\n    getShowOnTheAirPage: builder.query({\n      query: function () {\n        let page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return `/show/ontheair/${page}`;\n      }\n    }),\n    getShowDetailsPage: builder.query({\n      query: show_id => `/details/show/${show_id}`\n    }),\n    getShowEpisodes: builder.query({\n      query: args => {\n        const {\n          show_id,\n          seasonNumber\n        } = args;\n        return {\n          url: `/episodes/show/${show_id}/${seasonNumber}`,\n          params: {\n            show_id,\n            seasonNumber\n          }\n        };\n      }\n    }),\n    getShowGenrePage: builder.query({\n      query: args => {\n        const {\n          page,\n          genre\n        } = args;\n        return {\n          url: `/show/genre/${genre}/${page}`,\n          params: {\n            page,\n            genre\n          }\n        };\n      }\n    }),\n    getPersonDetailsPage: builder.query({\n      query: person_id => `/person/${person_id}`\n    }),\n    getSearchResults: builder.query({\n      query: args => {\n        const {\n          query,\n          page\n        } = args;\n        return {\n          url: `/search/${query}/${page}`,\n          params: {\n            query,\n            page\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetTrendingQuery,\n  useGetSingleTrendingQuery,\n  useGetMovieListQuery,\n  useGetShowListQuery,\n  useGetMovieTrendingPageQuery,\n  useGetMovieNowPlayingPageQuery,\n  useGetMoviePopularPageQuery,\n  useGetMovieTopRatedPageQuery,\n  useGetMovieUpcomingPageQuery,\n  useGetMovieDetailsPageQuery,\n  useGetMovieGenrePageQuery,\n  useGetShowTrendingPageQuery,\n  useGetShowAiringTodayPageQuery,\n  useGetShowPopularPageQuery,\n  useGetShowTopRatedPageQuery,\n  useGetShowOnTheAirPageQuery,\n  useGetShowDetailsPageQuery,\n  useGetShowEpisodesQuery,\n  useGetShowGenrePageQuery,\n  useGetPersonDetailsPageQuery,\n  useGetSearchResultsQuery\n} = tmdbApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","tmdbApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getTrending","query","type","getSingleTrending","queryFn","_queryApi","_extraOptions","fetchWithBQ","trendingList","error","singleData","data","results","filter","single","media_type","Math","floor","random","result","id","mediaType","getMovieList","getShowList","getMovieTrendingPage","page","getMovieNowPlayingPage","getMoviePopularPage","getMovieTopRatedPage","getMovieUpcomingPage","getMovieDetailsPage","movie_id","getMovieGenrePage","args","genre","url","params","getShowTrendingPage","getShowAiringTodayPage","getShowPopularPage","getShowTopRatedPage","getShowOnTheAirPage","getShowDetailsPage","show_id","getShowEpisodes","seasonNumber","getShowGenrePage","getPersonDetailsPage","person_id","getSearchResults","useGetTrendingQuery","useGetSingleTrendingQuery","useGetMovieListQuery","useGetShowListQuery","useGetMovieTrendingPageQuery","useGetMovieNowPlayingPageQuery","useGetMoviePopularPageQuery","useGetMovieTopRatedPageQuery","useGetMovieUpcomingPageQuery","useGetMovieDetailsPageQuery","useGetMovieGenrePageQuery","useGetShowTrendingPageQuery","useGetShowAiringTodayPageQuery","useGetShowPopularPageQuery","useGetShowTopRatedPageQuery","useGetShowOnTheAirPageQuery","useGetShowDetailsPageQuery","useGetShowEpisodesQuery","useGetShowGenrePageQuery","useGetPersonDetailsPageQuery","useGetSearchResultsQuery"],"sources":["/home/acer/My  Movies WAD Project/disneyHut/client/src/redux/tmdbApi.js"],"sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nexport const tmdbApi = createApi({\n  reducerPath: \"tmdbApi\",\n  baseQuery: fetchBaseQuery({ baseUrl: \"https://mymovies.onrender.com/api\" }),\n  endpoints: (builder) => ({\n    getTrending: builder.query({\n      query: (type) =>\n        `/trending/${type}`,\n    }),\n\n    getSingleTrending: builder.query({\n      async queryFn(type, _queryApi, _extraOptions, fetchWithBQ) {\n        const trendingList = await fetchWithBQ(\n          `/trending/${type}`\n        );\n        if (trendingList.error) return { error: trendingList.error };\n        const singleData = await trendingList.data.results.filter(\n          (single) => single.media_type !== \"person\"\n        )[Math.floor(Math.random() * 10)];\n        if (singleData.media_type === \"movie\") {\n          const result = await fetchWithBQ(\n            `/trending/movie/${singleData.id}`\n          );\n          return result.data ? { data: {...result.data, mediaType: \"movie\"} } : { error: result.error };\n        }\n        if (singleData.media_type === \"tv\") {\n          const result = await fetchWithBQ(\n            `/trending/show/${singleData.id}`\n          );\n          return result.data ? { data: {...result.data, mediaType: \"show\"} } : { error: result.error };\n        }\n      },\n    }),\n\n    getMovieList: builder.query({\n      query: (type) =>\n        `/list/movie/${type}`,\n    }),\n\n    getShowList: builder.query({\n      query: (type) =>\n        `/list/show/${type}`,\n    }),\n\n    getMovieTrendingPage: builder.query({\n      query: (page = 1) =>\n        `/trending/movie/page/${page}`,\n    }),\n\n    getMovieNowPlayingPage: builder.query({\n      query: (page = 1) =>\n        `/movie/nowplaying/${page}`,\n    }),\n\n    getMoviePopularPage: builder.query({\n      query: (page = 1) =>\n        `/movie/popular/${page}`,\n    }),\n\n    getMovieTopRatedPage: builder.query({\n      query: (page = 1) =>\n        `/movie/toprated/${page}`,\n    }),\n\n    getMovieUpcomingPage: builder.query({\n      query: (page = 1) =>\n        `/movie/upcoming/${page}`,\n    }),\n\n    getMovieDetailsPage: builder.query({\n      query: (movie_id) =>\n        `/details/movie/${movie_id}`,\n    }),\n\n    getMovieGenrePage: builder.query({\n      query: (args) => { \n        const {page, genre} = args;\n        return {\n          url: `/movie/genre/${genre}/${page}`,\n          params: { page, genre }\n        }\n      }\n    }),\n\n    getShowTrendingPage: builder.query({\n      query: (page = 1) =>\n        `/trending/show/page/${page}`,\n    }),\n\n    getShowAiringTodayPage: builder.query({\n      query: (page = 1) =>\n        `/show/airingtoday/${page}`,\n    }),\n\n    getShowPopularPage: builder.query({\n      query: (page = 1) =>\n        `/show/popular/${page}`,\n    }),\n\n    getShowTopRatedPage: builder.query({\n      query: (page = 1) =>\n        `/show/toprated/${page}`,\n    }),\n\n    getShowOnTheAirPage: builder.query({\n      query: (page = 1) =>\n        `/show/ontheair/${page}`,\n    }),\n\n    getShowDetailsPage: builder.query({\n      query: (show_id) =>\n        `/details/show/${show_id}`,\n    }),\n\n    getShowEpisodes: builder.query({\n      query: (args) => { \n        const {show_id, seasonNumber} = args;\n        return {\n          url: `/episodes/show/${show_id}/${seasonNumber}`,\n          params: { show_id, seasonNumber }\n        }\n      }\n    }),\n\n    getShowGenrePage: builder.query({\n      query: (args) => { \n        const {page, genre} = args;\n        return {\n          url: `/show/genre/${genre}/${page}`,\n          params: { page, genre }\n        }\n      }\n    }),\n\n    getPersonDetailsPage: builder.query({\n      query: (person_id) => `/person/${person_id}`\n    }),\n\n    getSearchResults: builder.query({\n      query: (args) => { \n        const {query, page} = args;\n        return {\n          url: `/search/${query}/${page}`,\n          params: { query, page }\n        }\n      }\n    }),\n\n  }),\n});\n\n\n\nexport const {\n  useGetTrendingQuery,\n  useGetSingleTrendingQuery,\n  useGetMovieListQuery,\n  useGetShowListQuery,\n  useGetMovieTrendingPageQuery,\n  useGetMovieNowPlayingPageQuery,\n  useGetMoviePopularPageQuery,\n  useGetMovieTopRatedPageQuery,\n  useGetMovieUpcomingPageQuery,\n  useGetMovieDetailsPageQuery,\n  useGetMovieGenrePageQuery,\n  useGetShowTrendingPageQuery,\n  useGetShowAiringTodayPageQuery,\n  useGetShowPopularPageQuery,\n  useGetShowTopRatedPageQuery,\n  useGetShowOnTheAirPageQuery,\n  useGetShowDetailsPageQuery,\n  useGetShowEpisodesQuery,\n  useGetShowGenrePageQuery,\n  useGetPersonDetailsPageQuery,\n  useGetSearchResultsQuery,\n} = tmdbApi;\n"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAEA,OAAO,MAAMC,OAAO,GAAGF,SAAS,CAAC;EAC/BG,WAAW,EAAE,SADkB;EAE/BC,SAAS,EAAEH,cAAc,CAAC;IAAEI,OAAO,EAAE;EAAX,CAAD,CAFM;EAG/BC,SAAS,EAAGC,OAAD,KAAc;IACvBC,WAAW,EAAED,OAAO,CAACE,KAAR,CAAc;MACzBA,KAAK,EAAGC,IAAD,IACJ,aAAYA,IAAK;IAFK,CAAd,CADU;IAMvBC,iBAAiB,EAAEJ,OAAO,CAACE,KAAR,CAAc;MAC/B,MAAMG,OAAN,CAAcF,IAAd,EAAoBG,SAApB,EAA+BC,aAA/B,EAA8CC,WAA9C,EAA2D;QACzD,MAAMC,YAAY,GAAG,MAAMD,WAAW,CACnC,aAAYL,IAAK,EADkB,CAAtC;QAGA,IAAIM,YAAY,CAACC,KAAjB,EAAwB,OAAO;UAAEA,KAAK,EAAED,YAAY,CAACC;QAAtB,CAAP;QACxB,MAAMC,UAAU,GAAG,MAAMF,YAAY,CAACG,IAAb,CAAkBC,OAAlB,CAA0BC,MAA1B,CACtBC,MAAD,IAAYA,MAAM,CAACC,UAAP,KAAsB,QADX,EAEvBC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,EAA3B,CAFuB,CAAzB;;QAGA,IAAIR,UAAU,CAACK,UAAX,KAA0B,OAA9B,EAAuC;UACrC,MAAMI,MAAM,GAAG,MAAMZ,WAAW,CAC7B,mBAAkBG,UAAU,CAACU,EAAG,EADH,CAAhC;UAGA,OAAOD,MAAM,CAACR,IAAP,GAAc;YAAEA,IAAI,EAAE,EAAC,GAAGQ,MAAM,CAACR,IAAX;cAAiBU,SAAS,EAAE;YAA5B;UAAR,CAAd,GAA+D;YAAEZ,KAAK,EAAEU,MAAM,CAACV;UAAhB,CAAtE;QACD;;QACD,IAAIC,UAAU,CAACK,UAAX,KAA0B,IAA9B,EAAoC;UAClC,MAAMI,MAAM,GAAG,MAAMZ,WAAW,CAC7B,kBAAiBG,UAAU,CAACU,EAAG,EADF,CAAhC;UAGA,OAAOD,MAAM,CAACR,IAAP,GAAc;YAAEA,IAAI,EAAE,EAAC,GAAGQ,MAAM,CAACR,IAAX;cAAiBU,SAAS,EAAE;YAA5B;UAAR,CAAd,GAA8D;YAAEZ,KAAK,EAAEU,MAAM,CAACV;UAAhB,CAArE;QACD;MACF;;IArB8B,CAAd,CANI;IA8BvBa,YAAY,EAAEvB,OAAO,CAACE,KAAR,CAAc;MAC1BA,KAAK,EAAGC,IAAD,IACJ,eAAcA,IAAK;IAFI,CAAd,CA9BS;IAmCvBqB,WAAW,EAAExB,OAAO,CAACE,KAAR,CAAc;MACzBA,KAAK,EAAGC,IAAD,IACJ,cAAaA,IAAK;IAFI,CAAd,CAnCU;IAwCvBsB,oBAAoB,EAAEzB,OAAO,CAACE,KAAR,CAAc;MAClCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,wBAAuBA,IAAK,EADxB;MAAA;IAD2B,CAAd,CAxCC;IA6CvBC,sBAAsB,EAAE3B,OAAO,CAACE,KAAR,CAAc;MACpCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,qBAAoBA,IAAK,EADrB;MAAA;IAD6B,CAAd,CA7CD;IAkDvBE,mBAAmB,EAAE5B,OAAO,CAACE,KAAR,CAAc;MACjCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,kBAAiBA,IAAK,EADlB;MAAA;IAD0B,CAAd,CAlDE;IAuDvBG,oBAAoB,EAAE7B,OAAO,CAACE,KAAR,CAAc;MAClCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,mBAAkBA,IAAK,EADnB;MAAA;IAD2B,CAAd,CAvDC;IA4DvBI,oBAAoB,EAAE9B,OAAO,CAACE,KAAR,CAAc;MAClCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,mBAAkBA,IAAK,EADnB;MAAA;IAD2B,CAAd,CA5DC;IAiEvBK,mBAAmB,EAAE/B,OAAO,CAACE,KAAR,CAAc;MACjCA,KAAK,EAAG8B,QAAD,IACJ,kBAAiBA,QAAS;IAFI,CAAd,CAjEE;IAsEvBC,iBAAiB,EAAEjC,OAAO,CAACE,KAAR,CAAc;MAC/BA,KAAK,EAAGgC,IAAD,IAAU;QACf,MAAM;UAACR,IAAD;UAAOS;QAAP,IAAgBD,IAAtB;QACA,OAAO;UACLE,GAAG,EAAG,gBAAeD,KAAM,IAAGT,IAAK,EAD9B;UAELW,MAAM,EAAE;YAAEX,IAAF;YAAQS;UAAR;QAFH,CAAP;MAID;IAP8B,CAAd,CAtEI;IAgFvBG,mBAAmB,EAAEtC,OAAO,CAACE,KAAR,CAAc;MACjCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,uBAAsBA,IAAK,EADvB;MAAA;IAD0B,CAAd,CAhFE;IAqFvBa,sBAAsB,EAAEvC,OAAO,CAACE,KAAR,CAAc;MACpCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,qBAAoBA,IAAK,EADrB;MAAA;IAD6B,CAAd,CArFD;IA0FvBc,kBAAkB,EAAExC,OAAO,CAACE,KAAR,CAAc;MAChCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,iBAAgBA,IAAK,EADjB;MAAA;IADyB,CAAd,CA1FG;IA+FvBe,mBAAmB,EAAEzC,OAAO,CAACE,KAAR,CAAc;MACjCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,kBAAiBA,IAAK,EADlB;MAAA;IAD0B,CAAd,CA/FE;IAoGvBgB,mBAAmB,EAAE1C,OAAO,CAACE,KAAR,CAAc;MACjCA,KAAK,EAAE;QAAA,IAACwB,IAAD,uEAAQ,CAAR;QAAA,OACJ,kBAAiBA,IAAK,EADlB;MAAA;IAD0B,CAAd,CApGE;IAyGvBiB,kBAAkB,EAAE3C,OAAO,CAACE,KAAR,CAAc;MAChCA,KAAK,EAAG0C,OAAD,IACJ,iBAAgBA,OAAQ;IAFK,CAAd,CAzGG;IA8GvBC,eAAe,EAAE7C,OAAO,CAACE,KAAR,CAAc;MAC7BA,KAAK,EAAGgC,IAAD,IAAU;QACf,MAAM;UAACU,OAAD;UAAUE;QAAV,IAA0BZ,IAAhC;QACA,OAAO;UACLE,GAAG,EAAG,kBAAiBQ,OAAQ,IAAGE,YAAa,EAD1C;UAELT,MAAM,EAAE;YAAEO,OAAF;YAAWE;UAAX;QAFH,CAAP;MAID;IAP4B,CAAd,CA9GM;IAwHvBC,gBAAgB,EAAE/C,OAAO,CAACE,KAAR,CAAc;MAC9BA,KAAK,EAAGgC,IAAD,IAAU;QACf,MAAM;UAACR,IAAD;UAAOS;QAAP,IAAgBD,IAAtB;QACA,OAAO;UACLE,GAAG,EAAG,eAAcD,KAAM,IAAGT,IAAK,EAD7B;UAELW,MAAM,EAAE;YAAEX,IAAF;YAAQS;UAAR;QAFH,CAAP;MAID;IAP6B,CAAd,CAxHK;IAkIvBa,oBAAoB,EAAEhD,OAAO,CAACE,KAAR,CAAc;MAClCA,KAAK,EAAG+C,SAAD,IAAgB,WAAUA,SAAU;IADT,CAAd,CAlIC;IAsIvBC,gBAAgB,EAAElD,OAAO,CAACE,KAAR,CAAc;MAC9BA,KAAK,EAAGgC,IAAD,IAAU;QACf,MAAM;UAAChC,KAAD;UAAQwB;QAAR,IAAgBQ,IAAtB;QACA,OAAO;UACLE,GAAG,EAAG,WAAUlC,KAAM,IAAGwB,IAAK,EADzB;UAELW,MAAM,EAAE;YAAEnC,KAAF;YAASwB;UAAT;QAFH,CAAP;MAID;IAP6B,CAAd;EAtIK,CAAd;AAHoB,CAAD,CAAzB;AAwJP,OAAO,MAAM;EACXyB,mBADW;EAEXC,yBAFW;EAGXC,oBAHW;EAIXC,mBAJW;EAKXC,4BALW;EAMXC,8BANW;EAOXC,2BAPW;EAQXC,4BARW;EASXC,4BATW;EAUXC,2BAVW;EAWXC,yBAXW;EAYXC,2BAZW;EAaXC,8BAbW;EAcXC,0BAdW;EAeXC,2BAfW;EAgBXC,2BAhBW;EAiBXC,0BAjBW;EAkBXC,uBAlBW;EAmBXC,wBAnBW;EAoBXC,4BApBW;EAqBXC;AArBW,IAsBT5E,OAtBG"},"metadata":{},"sourceType":"module"}